#!/bin/bash

# LITEMUS (Light music player)

# written by nots1dd
# NOTE :: This script uses ffplay to play audio NOT PLAYERCTL
# HENCE, it will NOT work well with your current configs that use playerctl and such

# DEPENDENCIES
# 1. ffmpeg and its family tree (ffprobe, ffplay)
# 2. gum [AUR PACKAGE]
# 3. bc (basic calculator) [AUR PACKAGE]
# 4. viu (terminal image emulator) [AUR PACKAGE]
# 5. grep, awk, trap (very important basic unix tools)
# 6. jq (to parse json)
# 7. amixer (for volume control using alsa-utils)

# IF THIS SHELL SCRIPT IS NOT WORKING, try changing the $src variable to the actual directory of where litemus clone is located.

# Define color variables
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PINK='\033[1;35m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Check if source cache file exists
read_lmus_src_cache() {
    mkdir -p "/home/$USER/.cache/lmus" > /dev/null 2>&1
    local cache_file="/home/$USER/.cache/lmus/lmus_src.cache" # this is your home/$USER's cache directory NOT lmus'

    if [ -f "$cache_file" ]; then
        # Read directory path from cache file
        src=$(<"$cache_file")
    else
        # Find the directory using find command
        src=$(find ~ -type d -name "litemus" 2>/dev/null | head -n 1)
        
        # Add directory path to cache file
        echo "$src" > "$cache_file"
    fi
}
read_lmus_src_cache

# env vars
dir_cache="$src/.directorycache"
cache_dir="$src/.cache/songs"
theme_dir="$src/.config/themes/theme.json"
image_dir="$src/.cache/image/tmp.png"

# sources
source $src/utils/modules.sh

clear
check_directory

status_line=""
timer_line=""

display_logo() {
    echo -e "    " "${BLUE}${BOLD}LITEMUS - Light Music Player\n"
}

# Song Management
declare -a song_list
declare -a queue
current_index=-1


play() {
    clear
    display_logo
    gum style --padding "$gum_padding" --border double --border-foreground "$gum_border_foreground" "Play a song!"
    song_count=$(ls *.mp3 | wc -l)
    if [ "$song_count" -eq "$dir_song_count" ]; then
        selected_artist=$(cat "$src/.cache/artists.cache" | gum choose --cursor-prefix=1 --header "$gum_select_artist_message" --cursor.foreground "$gum_selected_cursor_foreground" --selected.foreground "$gum_selected_text_foreground" --header.foreground "$gum_header_foreground" --limit 1 --height $gum_height)
    else
        update_artist_cache
    fi
    if [ "$selected_artist" = "" ]; then
        gum confirm --default --selected.foreground "$gum_confirm_selected_text_foreground" --unselected.foreground "$gum_confirm_unselected_text_foreground" --prompt.foreground "$gum_confirm_prompt_foreground" "Exit Litemus?" && exit || play
    else
        clear
        display_logo
        songs_count=$(ls *.mp3 | grep "^$selected_artist" | wc -l)
        gum style --padding "$gum_padding" --border double --border-foreground "$gum_border_foreground" "You selected artist:  $(gum style --foreground "$gum_artist_foreground" "$selected_artist") ($songs_count songs)"

        # Filter songs by selected artist
        mapfile -t song_list < <(ls *.mp3 | grep "^$selected_artist" | sort)

        # Ensure cache directory exists
        mkdir -p "$cache_dir"
        local cache_file="$cache_dir/${selected_artist// /_}.cache"
        touch "$cache_file" # ensuring this exists and is null
        cache_songs_count=$(grep -v "^$" $cache_file | wc -l)

        if [ -f "$cache_file" ] && [ "$cache_songs_count" -eq "$songs_count" ]; then # NOTE: If you add a song and remove it, this condition will NOT detect it and will continue like nothing changed
            load_sorted_songs_from_cache "$selected_artist"
        else
            sort_songs_by_album "$selected_artist"
            save_sorted_songs_to_cache "$selected_artist"
            gum spin --title="Caching artist..." -- sleep 0.2
            load_sorted_songs_from_cache "$selected_artist"
        fi

        # Present the list of song names to the user for selection
        selected_song_display=$(printf "%s\n" "${song_display_list[@]}" | grep -v "^$" | gum choose --cursor-prefix=1 --header "$gum_select_song_message" --cursor.foreground "$gum_selected_cursor_foreground" --selected.foreground "$gum_selected_text_foreground" --header.foreground "$gum_header_foreground" --limit 1 --height $gum_height)
        
        if [ "$selected_song_display" = "" ] || [ -z "$selected_song_display" ]; then
            gum confirm --selected.foreground "$gum_confirm_selected_text_foreground" --unselected.foreground "$gum_confirm_unselected_text_foreground" --prompt.foreground "$gum_confirm_prompt_foreground" --default "Exit Litemus?" && exit || play
        else
            # Find the full name of the selected song
            selected_index=0
            for i in "${!sorted_song_list[@]}"; do
                song_name=$(echo "${sorted_song_list[$i]}" | awk -F ' - ' '{ print $2 }' | sed 's/\.mp3//' | tr -d '\n')
                if [ "$song_name" = "$selected_song_display" ]; then
                    selected_song="${sorted_song_list[$i]}"
                    selected_index=$i
                    break
                fi
            done

            # Add the selected song and subsequent songs to the queue
            queue=("${sorted_song_list[@]:$selected_index}")
            current_index=0

            ffplay_song_at_index "$current_index" "true"
        fi
    fi
}





main() {
    clear
    load_theme "$theme_dir"
    play
}
main

# Variable to track playback status (0 = playing, 1 = paused)
paused=0

# Trap the SIGINT signal (Ctrl+C) to exit the playback
trap exit SIGINT
